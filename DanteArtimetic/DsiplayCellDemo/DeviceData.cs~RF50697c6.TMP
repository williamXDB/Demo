using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DsiplayCellDemo
{
    public class DeviceData
    {

        //表格的，行与列数
        public int blockRowValues { get; set; }  //每一个数据块作为一个单位，行数
        public int blockColumValues { get; set; } //每一个数据块作为一个单位，列数，注意不一定相等

        //当前整个方块所在父表格的位置索引，分别对应行与列的起始索引数：
        public int iRowindex { get; set; }
        public int iColumindex { get; set; }

        public int eRowindex { get { return blockRowValues + iRowindex; } }
        public int eColumindex { get { return blockColumValues + iColumindex; } }

        public int mainBlockRCNumber { get; set; }//主方块数据行或列数（是相等的）


        #region devcice and ports record
        public int deviceNumber { get; set; }//record all devices number  ,note is not base 0,but counter base 1 from
        public List<int> m_DeviceAbout_MainPort_NumberList;//how many main ports number in every device for danty
        #endregion

        #region input/ouput port list define
        public List<List<CellState>> m_LeftPortList; //以设备为单位进行添加
        public List<List<CellState>> m_TopPortList;//以设备为单位进行添加

        public List<List<CellState>> m_OutputPortList;
        #endregion


        public DeviceInfo m_deviceInfo { get; set; }
        //
        public DeviceData()
        {
            deviceNumber = 0;
            m_DeviceAbout_MainPort_NumberList = new List<int>();
            m_LeftPortList = new List<List<CellState>>();
            m_TopPortList = new List<List<CellState>>();
            m_OutputPortList = new List<List<CellState>>();

            blockRowValues = 0;
            blockColumValues = 0;



        }

        #region expand and cosllap below

        public void expanderFully(int index, bool isExpan)
        {
            if (index >= 0 && index < m_OutputPortList.Count)
            {
                List<CellState> tmpList = m_OutputPortList[index];
                foreach (CellState mstate in tmpList)
                {
                    mstate.SingleBool = isExpan;
                }

            }

        }


        public void clollapsExpandTop(int index)
        {
            if (index >= 0 && index < m_OutputPortList.Count)
            {
                List<CellState> tmpList = m_OutputPortList[index];
                if (tmpList.Count < 1) return;
                int cols = tmpList[0].NCols;
                int rows = tmpList[0].NRows;

                if (isFull_allSideExpaned(tmpList))
                {
                    foreach (CellState mstate in tmpList)
                    {
                        mstate.SingleBool = false;
                    }
                    for (int i = 1; i < rows; i++)
                    {
                        tmpList[i * cols].SingleBool = true;
                    }


                }
                else if (isOnly_TopSideExpanded(tmpList))
                {
                    for (int i = 1; i < cols; i++)
                    {
                        tmpList[i].SingleBool = false;
                    }

                }

            }

        }
        public void clollapsExpandLeft(int index)
        {
            if (index >= 0 && index < m_OutputPortList.Count)
            {
                List<CellState> tmpList = m_OutputPortList[index];
                if (tmpList.Count < 1) return;
                int cols = tmpList[0].NCols;
                int rows = tmpList[0].NRows;

                if (isFull_allSideExpaned(tmpList))
                {
                    foreach (CellState mstate in tmpList)
                    {
                        mstate.SingleBool = false;
                    }
                    for (int i = 1; i < cols; i++)
                    {
                        tmpList[i].SingleBool = true;
                    }

                }
                else if (isOnly_LeftSideExpanded(tmpList))
                {
                    for (int i = 1; i < rows; i++)
                    {
                        tmpList[i * cols].SingleBool = false;
                    }

                }

            }

        }

        public void expanderLeftSideOnly(int index)
        {

            if (index >= 0 && index < m_OutputPortList.Count)
            {
                List<CellState> tmpList = m_OutputPortList[index];
                if (tmpList.Count < 1) return;

                foreach (CellState mstate in tmpList)
                {
                    mstate.SingleBool = false;
                }

                int cols = tmpList[0].NCols;
                int rows = tmpList[0].NRows;
                for (int i = 1; i < rows; i++)
                {
                    tmpList[i * cols].SingleBool = true;
                }
            }


        }
        public bool isOnly_TopSideExpanded(List<CellState> mList)
        {
            bool isExpaned = false;
            int length = mList.Count;
            int rows = mList[0].NRows;
            int cols = mList[0].NCols;
            isExpaned = (mList[length - 1].SingleBool == false && mList[cols - 1].SingleBool == true && mList[cols * (rows - 1)].SingleBool == false);
            return isExpaned;
        }

        public bool isOnly_LeftSideExpanded(List<CellState> mList)
        {
            bool isExpaned = false;
            int length = mList.Count;
            int rows = mList[0].NRows;
            int cols = mList[0].NCols;
            isExpaned = (mList[length - 1].SingleBool == false && mList[cols - 1].SingleBool == false && mList[cols * (rows - 1)].SingleBool);
            return isExpaned;
        }


        public bool isFull_allSideExpaned(List<CellState> mList)
        {
            int length = mList.Count;
            int rows = mList[0].NRows;
            int cols = mList[0].NCols;
            return (mList[length - 1].SingleBool && mList[cols - 1].SingleBool && mList[cols * (rows - 1)].SingleBool);
        }

        public bool isFull_allSideNoneExpaned(List<CellState> mList)
        {
            int length = mList.Count;
            int rows = mList[0].NRows;
            int cols = mList[0].NCols;
            return (mList[length - 1].SingleBool == false && mList[cols - 1].SingleBool == false && mList[cols * (rows - 1)].SingleBool == false);
        }



        /// <summary>
        /// follow up to add it to list
        /// </summary>
        /// <param name="index"></param>
        /// <param name="isExpan"></param>
        public void expanderTopOnly(int index)
        {

            if (index >= 0 && index < m_OutputPortList.Count)
            {
                List<CellState> tmpList = m_OutputPortList[index];
                if (tmpList.Count < 1) return;

                foreach (CellState mstate in tmpList)
                {
                    mstate.SingleBool = false;
                }

                int cols = tmpList[0].NCols;
                int rows = tmpList[0].NRows;
                for (int i = 1; i < cols; i++)
                {
                    tmpList[i].SingleBool = true;
                }
            }


        }
        public void expander_cosllapProcess(int index, bool isExpander)
        {

            if (index >= 0 && index < m_OutputPortList.Count)
            {
                List<CellState> tmpList = m_OutputPortList[index];
                if (tmpList.Count < 1) return;
                int rowx = tmpList[0].FRow;//begin compare from
                int colx = tmpList[0].FCol; //begin compare from
                for (int i = 0; i < m_OutputPortList.Count; i++)
                {
                    if (index != i) //not the same 
                    {
                        Block_StatusRelease brelease = gTwoBlockRelease(tmpList[0], m_OutputPortList[i]);

                        switch (brelease)
                        {
                            //-------------------------------------------left and right-----------------
                            case Block_StatusRelease.SameRow_JustRight:
                            case Block_StatusRelease.SameRow_JustLeft:
                                {
                                    if (isExpander)
                                    {
                                        if (isFull_allSideNoneExpaned(m_OutputPortList[i])) //=完全没有展开过的的
                                            expanderLeftSideOnly(i);//仅展开左侧
                                        else if (isOnly_TopSideExpanded(m_OutputPortList[i]))
                                        {
                                            expanderFully(i, isExpander);
                                        }
                                    }
                                    else
                                    {
                                        clollapsExpandLeft(i);

                                    }


                                }
                                break;
                            case Block_StatusRelease.SameRow_Left:
                            case Block_StatusRelease.SameRow_Right:
                                {
                                    if (isExpander)
                                    {
                                        if (isFull_allSideNoneExpaned(m_OutputPortList[i])) //=完全没有展开过的的
                                            expanderLeftSideOnly(i);//仅展开左侧
                                        else if (isOnly_TopSideExpanded(m_OutputPortList[i]))
                                        {
                                            expanderFully(i, isExpander);
                                        }
                                    }
                                    else
                                    {
                                        clollapsExpandLeft(i);

                                    }


                                }
                                break;
                            //--------------------------------------------top and bottom------------------
                            case Block_StatusRelease.SameColumn_JustTop:
                            case Block_StatusRelease.SameColumn_JustBottom:
                                {
                                    if (isExpander)
                                    {
                                        if (isFull_allSideNoneExpaned(m_OutputPortList[i])) //=完全没有展开过的的
                                            expanderTopOnly(i);//仅展开顶层
                                        else if (isOnly_LeftSideExpanded(m_OutputPortList[i]))
                                        {
                                            expanderFully(i, isExpander);
                                        }
                                        Debug.WriteLine("will  process just same column block row:{0} col:{1} its devindex {2}   target devindex {3}  posRelease :{4}", rowx, colx, index, i, brelease);
                                    }
                                    else
                                    {
                                        clollapsExpandTop(i);
                                    }


                                }
                                break;
                            case Block_StatusRelease.SameColumn_Top:
                            case Block_StatusRelease.SameColumn_Bottom:
                                {
                                    if (isExpander)
                                    {

                                        if (isFull_allSideNoneExpaned(m_OutputPortList[i])) //=完全没有展开过的的
                                            expanderTopOnly(i);//仅展开顶层
                                        else if (isOnly_LeftSideExpanded(m_OutputPortList[i]))
                                        {
                                            expanderFully(i, isExpander);
                                        }
                                        Debug.WriteLine("will  process just same column block row:{0} col:{1} its devindex {2}   target devindex {3}  posRelease :{4}", rowx, colx, index, i, brelease);
                                    }
                                    else
                                    {
                                        clollapsExpandTop(i);
                                    }
                                    Debug.WriteLine("will process not just but same column block column:{0} col:{1} its devindex {2}   target devindex {3}   posRelease :{4}", rowx, colx, index, i, brelease);
                                }
                                break;


                        }

                    }
                }

                expanderFully(index, isExpander);

            }

        }
        //to main block status Release
        public enum Block_StatusRelease
        {
            Block_NonePos, SameRow_Left, SameRow_JustLeft, SameRow_JustRight, SameRow_Right, SameColumn_JustTop, SameColumn_Top, SameColumn_JustBottom, SameColumn_Bottom
        }


        /// <summary>
        /// the col and row cannot be the same block compare to cellstate list
        /// </summary>
        /// <param name="row"></param>
        /// <param name="col"></param>
        /// <param name="mlist"></param>
        /// <returns></returns>
        public Block_StatusRelease gTwoBlockRelease(CellState state, List<CellState> mlist)
        {
            Block_StatusRelease bRelease = Block_StatusRelease.Block_NonePos;
            int row = state.FRow;
            int col = state.FCol;

            foreach (CellState mstate in mlist)
            {
                if (mstate.FRow == row && mstate.FCol != col)
                {

                    if (mstate.FCol < col)
                    {
                        bRelease = Block_StatusRelease.SameRow_Left;
                        if (Math.Abs(mstate.FCol - col) == mstate.NCols)
                        {
                            bRelease = Block_StatusRelease.SameRow_JustLeft;  //the main block is just left the row,col left 
                        }
                    }
                    else if (mstate.FCol > col)
                    {
                        bRelease = Block_StatusRelease.SameRow_Right;
                        if (Math.Abs(mstate.FCol - col) == state.NCols)
                        {
                            bRelease = Block_StatusRelease.SameRow_JustRight;  //the main block is just right the row,col 
                        }

                    }
                    break;
                }
                else if (mstate.FCol == col && mstate.FRow != row)
                {

                    if (mstate.FRow < row)
                    {
                        bRelease = Block_StatusRelease.SameColumn_Top;
                        if (Math.Abs(mstate.FRow - row) == mstate.NRows)
                        {
                            bRelease = Block_StatusRelease.SameColumn_JustTop;  //the main block is just left the row,col left 
                        }
                    }
                    else if (mstate.FRow > row)
                    {
                        bRelease = Block_StatusRelease.SameColumn_Bottom;
                        if (Math.Abs(mstate.FRow - row) == state.NRows)
                        {
                            bRelease = Block_StatusRelease.SameColumn_JustBottom;  //the main block is just right the row,col 
                        }

                    }
                    break;
                }


            }
            return bRelease;
        }
        #endregion

        /*
         同行的展开左侧
         同列的展开顶端
             */



        //main Row ||column numbers
        public int getTotal_MainRC_CellNumbers()
        {

            int res = 0;
            for (int i = 0; i < m_DeviceAbout_MainPort_NumberList.Count; i++)
            {
                res += m_DeviceAbout_MainPort_NumberList[i];
            }
            return res;
        }
        //每次的添加，都关系到一个主方块的添加，还有若干个次方块，主方块的数量，也即是device的实际个数,index的上一个为止的主方块数量
        public int getTotal_LastMainRC_CellNumbers(int index)
        {
            int res = 0;
            if (index == 0) return 0;
            for (int i = 0; i < index; i++)
            {
                res += m_DeviceAbout_MainPort_NumberList[i];
            }
            return res;
        }


        public void resetAllData()
        {
            m_LeftPortList.Clear();
            m_OutputPortList.Clear();
        }

        public int TotalCellNumber   //number of row or column total 
        {
            get
            {
                return m_blockCellStateList.Count;
            }
        }

        public void setCellSate_SingleBool(bool isRes)
        {
            for (int i = 1; i < m_blockCellStateList.Count; i++)
            {
                m_blockCellStateList[i].SingleBool = isRes;
            }
        }
        /// <summary>
        /// m_centerState 包括了左边和上面的边界顶点
        /// </summary>
        /// <param name="isRes"></param>


        public bool isTopClosed
        {
            get
            {
                return misTopClosed();
            }
        }

        public int NRC    //Row or column number count
        {
            get { return (int)Math.Sqrt(m_blockCellStateList.Count); }
        }
        private bool misTopClosed()
        {
            int nc = NRC;
            return (m_blockCellStateList[nc * (nc - 1)].SingleBool == false);
        }

        public bool isLeftClosed
        {
            get
            {
                return misLeftClosed();
            }
        }

        public void expand_TopTreeDevice(int index, bool isPander)
        {
            //true:expand,false:cosllape
            for (int i = 1; i < m_LeftPortList[index].Count; i++)
            {
                m_TopPortList[index][i].SingleBool = isPander;

            }
        }

        public void expand_leftTreeDevice(int index, bool isPander)
        {
            //true:expand,false:cosllape
            for (int i = 1; i < m_LeftPortList[index].Count; i++)
            {
                m_TopPortList[index][i].SingleBool = isPander;

            }
        }

        private bool isTopPanderCollapse(int index)
        {
            int length = m_TopPortList[index].Count;
            return (m_TopPortList[index][length - 1].SingleBool == false);

        }

        private bool isLeftPanderCollapse(int index)
        {
            int length = m_LeftPortList[index].Count;
            return (m_LeftPortList[index][length - 1].SingleBool == false);

        }

    }

}
